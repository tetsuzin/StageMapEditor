<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="$(ProjectDir)T4\TemplateMethod.t4" #>
<#@ output extension=".cs" #>
<#

var argumentsDeclare = String.Join(", ", ObjectChip.Select(x => string.Format("{0} {1}", x.Type.Name, x.Name.ToLower())));
var arguments = String.Join(", ", ObjectChip.Select(x => x.Name));
var argumentsLower = String.Join(", ", ObjectChip.Select(x => x.Name.ToLower()));

#>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace StageMapEditor.Models.Chip
{

    [DebuggerDisplay("<#= String.Join(", ", ObjectChip.Select(x => x.Name + " = {" + x.Name + "}" )) #>")]
    public partial class ObjectChip
	{
<# foreach(var item in ObjectChip) { #>
        private <#= item.Type.FullName #> <#= "_" + item.Name.ToLower() #>;
        public <#= item.Type.FullName #> <#= item.Name #>
        {
            get { return <#= "_" + item.Name.ToLower() #>; }
            set { if (<#= "_" + item.Name.ToLower() #> != value) <#= "_" + item.Name.ToLower() #> = value; OnPropertyChanged("<#= item.Name #>"); }
        }

<# } #>

        #region コンストラクタ
        public ObjectChip(int id)
        {
		    Set(id);
        }

        public ObjectChip(<#= argumentsDeclare #>)
        {
		    Set(<#= argumentsLower #>);
        }

        public ObjectChip(ObjectChipPack objectChipPack)
        {
<# foreach(var item in ObjectChip) { #>
            <#= item.Name #> = objectChipPack.<#= item.Name #>;
<# } #>
        }
		#endregion

		//ID以外は初期値でセット
        public void Set(int id)
        {
<# foreach(var item in ObjectChip) { #>
            <#= item.Name #> = default(<#= item.Type.Name #>);
<# } #>

			ID = id;
        }

        public void Set(<#= argumentsDeclare #>)
        {
<# foreach(var item in ObjectChip) { #>
            <#= item.Name #> = <#= item.Name.ToLower() #>;
<# } #>
        }

        public void SetOriginal(int id)
        {
<# foreach(var item in ObjectChip) { #>
            <#= item.Name #> = Original.<#= item.Name #>;
<# } #>
        }

		//新しいObjectChipインスタンスを作成する
        public ObjectChip Clone()
        {
            return new ObjectChip(<#= arguments #>);
        }

		//値を初期値に戻す
        public void Clear()
        {
            Set(<#= string.Join(", ", ObjectChip.Select(x => "Original." + x.Name)) #>);
        }

		//引数のインスタンスと同じパラメータかどうか
		public bool IsSame(ObjectChip target)
		{
		    return <#= string.Join(" && ", ObjectChip.Select(x => x.Name + " == target." + x.Name)) #>;
		}
		

        /// <summary>
        /// ファイル出力用にスペース区切りの文字列を作成
        /// </summary>
        /// <returns></returns>
		public string ToSaveString()
		{
		    return string.Join( " ", new [] { <#= arguments #> } );
		}

        public bool IsEdited
        {
            get
            {
                if (IsEmpty) { return false; }
                return !(<#= string.Join(" && ", ObjectChip.Select(x => x.Name + " == Original." + x.Name)) #>);
            }
        }

		public static ObjectChip Convert(string[] line)
		{
<# var list = new List<string>(); #>
<# foreach(var x in ObjectChip.Select((x, i) => Tuple.Create(i, x))) { #>
<# var i = x.Item1;
   var t = x.Item2.Type;
   var n = x.Item2.Name;
#>
            var p<#= i #> = <#= t == typeof(System.String) ? "line[" + i + "]" : t.Name + ".Parse(line[" + i + "])" #>;
<# list.Add("p" + i.ToString()); #>
<# } #>

            return new ObjectChip(<#= String.Join(", ", list) #>);
		}
    }
}