<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="$(ProjectDir)T4\TemplateMethod.t4" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using StageMapEditor.ViewModels;

namespace StageMapEditor.Models
{
    public partial class MapModel 
    {
        #region Modelパラメータ

<# foreach(var item in MapModel) { #>
        <#= item.Type.Name #> _<#= item.Name #>;
        public <#= item.Type.Name #> <#= item.Name #>
        {
            get { return _<#= item.Name #>; }
            set
            {
                if (_<#= item.Name #> == value) return;
                _<#= item.Name #> = value;
                RaisePropertyChanged("<#= item.Name #>");
				EditWidthHeight();
            }
        }

<# } #>
		#endregion

        public void UpdateFromInput(EditMapViewModel editMapViewModel)
        {
<# foreach(var item in MapModel) { #>
			<#= item.Name #> = <#= item.Conv("editMapViewModel.Input") #>;
<# } #>
        }

		/// <summary>
		/// EditMapViewModelからMapModelの値のセット
		/// </summary>
		/// <param name="inputViewModel"></param>
		/// <param name="parent"></param>
        private void SetProperties(EditMapViewModel inputViewModel, StageModel parent)
        {
<# foreach(var item in MapModel) { #>
<# if(item.Name == "MapName") { #>
			this.MapName = string.Format("World{0}-Stage{1}-Map{2}", parent.World, parent.Stage, ID);
<# } else if(item.Type.Name.ToLower() == "string") { #>
			this.<#= item.Name #> = inputViewModel.Input<#= item.Name #>;
<# } else { #>
			this.<#= item.Name #> = <#= item.Type.FullName #>.Parse(inputViewModel.Input<#= item.Name #>);
<# } #>
<# } #>
        }
		
		/// <summary>
		/// MapModelPackからMapModelの値のセット
		/// </summary>
		/// <param name="mapModelPack"></param>
        private void SetProperties(MapModelPack mapModelPack)
        {
<# foreach(var item in MapModel) { #>
			this.<#= item.Name #> = mapModelPack.<#= item.Name.StartsWith("MapCell") ? item.Name.Replace("MapCell", "") : item.Name #>;
<# } #>
        }
		
		/// <summary>
		/// MapModelからMessagePack保存用のデータを作成
		/// </summary>
        public MapModelPack ToMsgPack()
        {
            return new MapModelPack()
            {
<# foreach(var item in MapModel) { #>
<# if(item.Name != "MapCellHeight" && item.Name != "MapCellWidth") { #>
				<#= item.Name #> = <#= item.Name #>,
<# } #>
<# } #>
                Width = MapCellWidth,
                Height = MapCellHeight,
                MapChipPack = MapChipModel.ToMagPack(),
                ObjectChipPack = ObjectChipModel.ToMsgPack(),
            };
        }
	}
}