<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<# var props = new[]
{
	new { type = typeof(int),   name = "ID"        },
	new { type = typeof(float), name = "Status"    },
	new { type = typeof(float), name = "Param"     },
	new { type = typeof(float), name = "SubParam1" },
	new { type = typeof(float), name = "SubParam2" },
	new { type = typeof(int),   name = "Trigger1"  },
	new { type = typeof(int),   name = "Action1"   },
	new { type = typeof(int),   name = "Trigger2"  },
	new { type = typeof(int),   name = "Action2"   },
	new { type = typeof(int),   name = "Trigger3"  },
	new { type = typeof(int),   name = "Action3"   },
	new { type = typeof(int),   name = "Item1"     },
	new { type = typeof(int),   name = "Item2"     },
	new { type = typeof(int),   name = "Item3"     },
	new { type = typeof(int),   name = "Item4"     },
	new { type = typeof(int),   name = "Item5"     },
}; #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace StageMapEditor.ViewModels
{
	public partial class ObjectChipViewModel
	{
		// private string _head = "#PosX,PosY,<#= String.Join(",", props.Select(x => x.name)) #>";

        #region Modelラッパープロパティ
	
<# foreach (var item in props)
	{ #>
		public <#= item.type.Name #> <#= item.name #> { get { return _model.<#= item.name #>; } set { _model.<#= item.name #> = value; } }
<#	} #>
		#endregion

        #region 入力用プロパティ

<# foreach (var item in props)
	{ #>
		private string _Input<#= item.name #>;
<#	} #>

<# foreach (var item in props)
	{ #>
		public string Input<#= item.name #>
		{
			get { return _Input<#= item.name #>; }
			set
			{
				_Input<#= item.name #> = value;
				var valid = true;
<# if(item.type.Name != "string") { #>
				<#= item.type.Name #> _val;
				valid = <#= item.type.Name #>.TryParse(value, out _val);
<# } #>
				if(string.IsNullOrEmpty(value) || !valid)
				{
					this["<#= item.name #>"] = "<#= item.name #>に正しい値が入力されていません";
				}
				else
				{
					this["<#= item.name #>"] = null;
				}
			}
		}
			
<#	} #>
		#endregion

		private List<string> _ErrorList()
		{
            var errorPropertyList = new List<string>();
<# foreach (var item in props)
	{ #>
            if (!string.IsNullOrEmpty(this["Input<#= item.name #>"])) { errorPropertyList.Add("Input<#= item.name #>"); }
<#	} #>
		
			return errorPropertyList;
		}

        private bool TryParse(string input, Type type)
        {
            var mi = type.GetMethods().FirstOrDefault(x => x.Name == "TryParse" && x.GetParameters().Length == 2);
            if (mi == null) { return true; }
			return (bool)mi.Invoke(null, new object[] { input, null });
        }

		private bool _CanSave()
		{
<# foreach (var item in props)
	{ #>
<# if(item.type.Name != "string"){ #>
			if (!TryParse(Input<#= item.name #>, typeof(<#= item.type.Name #>))) { return false; }
<# } #>
<# } #>

			return true;
		}

		private void _UpdateByInput()
		{
<# foreach (var item in props)
	{ #>
<# if(item.type.Name != "string") { #>
			<#= item.name #> = <#= item.type.Name #>.Parse(Input<#= item.name #>);
<#	} else { #>
			<#= item.name #> = Input<#= item.name #>;
<#	} #>
<#	} #>
		}

		private void _InitializeInput()
		{
<# foreach (var item in props)
	{ #>
<# if(item.type.Name == "string"){ #>
			Input<#= item.name #> = _model.<#= item.name #>;
<# }else{ #>
			Input<#= item.name #> = _model.<#= item.name #>.ToString();
<# } #>
<# } #>
		}
	}
}